service: pvs
frameworkVersion: '2.72.3'
configValidationMode: error
variablesResolutionMode: 20210326
package:
  individually: true
  patterns:
    - '!./**'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  lambdaHashingVersion: 20201221
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 'https://cognito-idp.${self:provider.region}.amazonaws.com/${ssm:/${self:service}/${self:provider.stage}/info/cognito/user-pool/id}'
        audience:
          - ${ssm:/${self:service}/${self:provider.stage}/info/cognito/user-pool/client/id}

plugins:
  - serverless-ssm-publish
  - serverless-webpack
  - ./plugins/wordnet-plugin.js

functions:
  process-lumosity-emails:
    handler: process-lumosity-emails/process-lumosity-emails.saveattachments
    events:
      - s3:
          bucket: ${ssm:/${self:service}/${self:provider.stage}/info/lambda/ses/bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${ssm:/${self:service}/${self:provider.stage}/info/lambda/ses/prefix}
          existing: true
    environment:
      DEST_BUCKET: ${ssm:/${self:service}/${self:provider.stage}/info/lambda/ses/bucket}
      DEST_PREFIX: reports
      S3_ENDPOINT: "https://s3.us-west-2.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda/ses/process}
    package:
      patterns:
        - 'process-lumosity-emails/package*.json'
        - 'process-lumosity-emails/node_modules/**'
        - 'process-lumosity-emails/*.js'

  # do not change the name or path of this function
  # without also changing it in plugins/wordnet-plugin.js
  write-user-on-verify:
    handler: on-user-verify/verified.handler
    environment:
      USERS_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/users}
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'on-user-verify/*.js'

  api:
    handler: api/api.handler
    events:
      - httpApi:
          method: GET
          path: /self
          authorizer: serviceAuthorizer
      - httpApi:
          method: PUT
          path: /self
          authorizer: serviceAuthorizer
      - httpApi:
          method: POST
          path: /condition
          authorizer: serviceAuthorizer
      - httpApi:
          method: GET
          path: /self/lumos
          authorizer: serviceAuthorizer
    environment:
      EXPERIMENT_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/experiments}
      USERS_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/users}
      LUMOS_ACCT_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/lumosacct}
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'api/*.js'

  get-experiment-data:
    handler: admin-api/experiments/experiments.getData
    events:
      - httpApi:
          path: /admin/experiment/{experiment}
          method: GET
          authorizer: serviceAuthorizer
    environment:
      EXPERIMENT_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/experiments}
      USERS_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/users}
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
      DATAFILES_BUCKET: ${ssm:/${self:service}/${self:provider.stage}/info/lambda/datafiles/bucket}
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'admin-api/experiments/*.js'

  get-participants:
    handler: admin-api/participants/participants.getAll
    events:
      - httpApi:
          path: /admin/participants
          method: GET
          authorizer: serviceAuthorizer
    environment:
      USERS_TABLE: ${ssm:/${self:service}/${self:provider.stage}/info/dynamo/table/users}
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'admin-api/participants/*.js'
  
  get-sets-for-participant:
    handler: admin-api/participants/participants.getSets
    events:
      - httpApi:
          path: /admin/participant/{id}/sets
          method: GET
          authorizer: serviceAuthorizer
    environment:
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'admin-api/participants/*.js'

  update-participant:
    handler: admin-api/participants/participants.update
    events:
      - httpApi:
          path: /admin/participant/{id}
          method: PUT
          authorizer: serviceAuthorizer
    environment:
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'admin-api/participants/*.js'

  get-participant:
    handler: admin-api/participants/participants.get
    events:
      - httpApi:
          path: /admin/participant/{id}
          method: GET
          authorizer: serviceAuthorizer
    environment:
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'admin-api/participants/*.js'

  reminders:
    handler: reminders/reminders.handler
    events:
      - schedule:
          name: "pre-baseline-6am-email-reminder"
          rate: cron(0 14 * * ? *)
          input:
              commType: email
      - schedule:
          rate:
            - cron(0 19 * * ? *)
            - cron(0 4 * * ? *)
          input:
            commType: sms
        
    environment:
      SITE_URL: "https://dev.heartbeamstudy.org/daily-tasks/"
      REGION: ${self:provider.region}
      EMAIL_SENDER: "uscemotioncognitionlab@gmail.com"
      SNS_ENDPOINT: "https://sns.${self:provider.region}.amazonaws.com"
      SES_ENDPOINT: "https://email.${self:provider.region}.amazonaws.com"
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda/dynamodb/sns/ses}
    package:
      patterns:
        - 'reminders/*.js'

  ds-oauth-callback:
    handler: admin-api/docusign/docusign.callback
    events:
      - httpApi:
          path: /admin/docusign/callback
          method: GET
          authorizer: serviceAuthorizer
    environment:
      DS_BASE_PATH: ${self:custom.dsBasePath.${self:provider.stage}}
      DS_BUCKET: ${ssm:/${self:service}/${self:provider.stage}/info/lambda/ds/bucket}
      DS_CLIENT_ID: ${env:DS_CLIENT_ID}
      DS_CLIENT_SECRET: ${env:DS_CLIENT_SECRET}
      DYNAMO_ENDPOINT: "https://dynamodb.${self:provider.region}.amazonaws.com"
      REGION: ${self:provider.region}
    role: ${ssm:/${self:service}/${self:provider.stage}/role/lambda}
    package:
      patterns:
        - 'admin-api/docusign/*.js'

resources:
  Resources:
    PostConfirmationTriggerInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: ${ssm:/${self:service}/${self:provider.stage}/info/cognito/user-pool/arn}
        FunctionName: ${self:service}-${self:provider.stage}-write-user-on-verify
  Outputs:
    PostConfirmationLambdaArn:
      Value: !GetAtt WriteDashuserDashonDashverifyLambdaFunction.Arn
      Export:
        Name: "${self:service}-${self:provider.stage}-post-confirmation-lambda-arn"
      Description: Arn for the post-cognito-verification lambda trigger

custom:
  ssmPublish:
    enabled: true
    params:
      - path: /${self:service}/${self:provider.stage}/info/lambdas/write-user-on-verify/arn
        source: PostConfirmationLambdaArn
        description: Arn for the post-cognito-verification lambda trigger
  webpack:
    excludeFiles: "**/__test__/*"
    includeModules:
      forceExclude:
        - aws-sdk
  dsBasePath:
    dev: 'https://demo.docusign.net/restapi'
    prod: 'https://www.docusign.net/restapi'

